datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum EnumProfileActivityLevel {
  LOW
  MEDIUM
  HIGH
}

// this  enum is used to define activity data type
// ATOMIC: used for boolean values
// NUMERIC: used for float values
// ENUM: used for enum values

enum EnumActivityDataType {
  ATOMIC
  NUMERIC
  ENUM
}

// this enum is used to define the view templates
enum EnumViewTemplate {
  TODO
  // add more templates
}

// this enum is used to define the tab types
enum EnumTabType {
  WORKOUT
  NUTRITION
  PROGRESS
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String?   @unique
  projects Project[]
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  profile     Profile?
  tabs        Tab[]
  userId      String   @db.ObjectId
  goal        Goal?
  user        User     @relation(fields: [userId], references: [id])
}

model Goal {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  goalStats Json
  projectId String  @unique @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id])
}

model Profile {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  biometrics Json
  project    Project? @relation(fields: [projectId], references: [id])
  projectId  String?  @unique @db.ObjectId
}

model Tab {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  type        EnumTabType
  projectId   String       @db.ObjectId
  project     Project      @relation(fields: [projectId], references: [id])
  algorithms  Algorithm[]
  workoutPlan WorkoutPlan?
}

model WorkoutPlan {
  //TODO: can be extended to include more fields
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  tabId      String?    @unique @db.ObjectId
  tab        Tab?       @relation(fields: [tabId], references: [id])
  activities Activity[]
}

model Activity {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  date          DateTime
  title         String
  description   String
  type          EnumActivityDataType
  data          Json
  workoutPlan   WorkoutPlan?         @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId String?              @db.ObjectId
}

model Algorithm {
  id                   String           @id @default(auto()) @map("_id") @db.ObjectId
  viewTemplate         EnumViewTemplate
  calculationAlgorithm String
  //viewData must provide an object of data which is used to render the view with the given template
  viewData             Json
  tabId                String           @db.ObjectId
  tab                  Tab              @relation(fields: [tabId], references: [id])
}
