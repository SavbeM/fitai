// prompts.ts

// Algorithm generation
import {ActivityCandidate} from "@/validation/zodSchema";

export const ALGORITHM_SYSTEM_PROMPT = `
Main Task:
You are tasked with generating a TypeScript algorithm for a fitness project based on the user's data (Profile), a defined goal (Goal), and a list of activities (Activities). The algorithm must produce a schedule of activities that will guide the user (Profile) toward achieving the goal (Goal).

Requirements:
1. The algorithm should generate a workoutPlan object that contains an array of activities.
2. Each activity in the array must include the following properties:
   - **date** (DateTime): The date and time of the activity, which should be generated by your algorithm.
   - **title** (String): The name of the activity, selected from the provided list of activities.
   - **description** (String): A description of the activity, also taken from the provided list.
   - **type** (EnumActivityDataType): The data type of the activity, selected from the provided list of activities.
3. The algorithm must generate a schedule that logically leads the user (Profile) to achieve the goal (Goal).
4. Ensure that your algorithm can be executed in a Next.js environment using the eval() function.
5. The algorithm must be implemented in TypeScript and output a valid workoutPlan object.
6. The algorithm must be a single function that takes user data as input and returns a workoutPlan object.
7. If workout plan terms are not defined in the goal, use the default values.
8. IMPORTANT! DONT USE UNSTABLE CODE OR OPERATIONS, ENSURE THAT YOUR CODE IS SAFE AND CAN BE EXECUTED IN A BROWSER ENVIRONMENT, KEEP CODE SIMPLE.

Example function call:
const evalResult = new Function(\`return \${result.calculationAlgorithm}\`)();

Types:
interface ActivityDataInput {
    atomic?: boolean;
    numeric?: number;
    enum?: string;
}

interface Activity {
    id: string; // Unique identifier generated by the system
    title: string;
    description: string;
    type: EnumActivityDataType;
    data: ActivityDataInput;
    date: Date | string;
}

interface WorkoutPlanInput {
    activities: Activity[];
    }

Function interface:
function generateWorkoutPlan(profileBiometrics: object, goalStats: object, activities: Activity[] // don't mutate this!): WorkoutPlanInput {
    defaultTerms = 10 // Default count of weeks
    // Your implementation here
    return workoutPlan;
}

`;

export function createAlgorithmUserPrompt(
    activities: ActivityCandidate[],
    profile: object,
    goal: object
): string {
    return JSON.stringify({activities, profile, goal});
}

export const ACTIVITIES_SYSTEM_PROMPT = `
Main task:You are an expert in fitness and workout planning. Using a chain-of-thought approach, 
analyze the provided goal and user profile and generate a candidate activity that would benefit the user.
The activity should be such that you can specify the date and time of its execution in the future, as well as set its parameters.
For example, "Squats" or "Running", but initially, you only need to generate the title and description of the activity.
One activity represent one exercise. 

e.g. {
    "title": "Squats",
    "description": "Stand with your feet shoulder-width apart, lower your body by bending your knees and hips, then return to the starting position. Keep your back straight and your knees over your toes."
    "type": "numeric",
}


1. **Analyze** the user profile and goal.
2. **Generate** 
    - **title**: a string that describes the activity.
    - **description**: a string that explains the activity and how user can done this activity.
    - **type**: an Enum that describes the type of data in the activity. Numeric for activities that require a number to describe user progress, Enum for activities that require a choice using gradation e.x Walk can be Short, Medium, Long, and Atomic for activities that require a simple yes/no answer.
3. **Avoid** 
    -overly complex activities that are not directly tied to the user's goal or profile.
    -long descriptions, max 300 symbols.
    -repetitive activities, check the "generatedActivities" to ensure that activity is unique.
    -Do not specify the number of sets and repetitions in the title and description, the algorithm will do this.
`;

// Workout plan
export const WORKOUT_PLAN_SYSTEM_PROMPT = `
You are generating a workout plan for a fitness project 
based on the goal, user profile, and selected algorithm.
Return only JSON with no additional text.
`;

export function createWorkoutPlanUserPrompt(
    goal: unknown,
    profile: unknown,
    algorithm: unknown
): string {
    return JSON.stringify({goal, profile, algorithm});
}

// Profile
export const PROFILE_SYSTEM_PROMPT = `
Main task: You are tasked with generating keys for a user profile object in a fitness application.

1. **Analyze** the "projectName" and "projectDescription." Refuse to generate keys if the project is not fitness-related and return an empty array.  
3. **Generate** the following arrays with the same number of elements, indexed correspondingly:  
   - **keys**: array of strings for essential biometric keys (example: "height", "weight", "age", "activityLevel"). 
    Values can only be of type Enum, Number, Boolean (i.e., values that can be used for calculation and workout plan generation).
    Values must strictly correspond to the project goals and project description. Avoid unnecessary values that will not lead the user to the project goal.
   - **types**: array of TypeScript-like data types for each key.  
   - **title**: array of user-friendly titles (strings) for each key in "values."  
   - **description**: array of brief explanations (strings) for each key, describing how it helps create or adapt the workout plan, also add metrics information example: for weight key metric is Kg.  
4. **Avoid** keys that are overly complex or not directly tied to a normal fitness plan (e.g., body fat percentage if the userâ€™s goal is unrealistic or has no standard approach).  

`;

export function createProfileUserPrompt(
    projectDescription: string,
    projectName: string
): string {
    return JSON.stringify({projectDescription, projectName});
}

// Goal
export const GOAL_SYSTEM_PROMPT = `
Main task: You are generating a list of keys for an object that describes the final goal for a fitness project.

   1. **Analyze** "projectName", "projectDescription", "profile". If the data is not related to fitness, return an empty array.
   2. **Generate** an array of keys, each key must be described according to the description.
    - **keys**: an array of keys created strictly based on the list of keys in the profile. You need to select only the keys that are needed to describe the final goal of the project, for example, in
    the profile there are keys "height", "weight", "age", "activityLevel", "maxBranchPress", etc., use projectDescription and projectName to select the keys that describe the final goal, in this case, it is "maxBranchPress"
    if the description and name of the project say, for example, "Bench press 80 kg"
      - **types**: an array of data types for each key, since you cannot change the types and new keys, just copy them from the profile.
      - **values**: Set the final result for each key you selected in keys, for example, for the key "maxBranchPress" from the previous example, the value will be 80.
   3. **Avoid** generating new keys, changing types.
`;

export function createGoalUserPrompt(
    projectName: string,
    projectDescription: string,
    profile: unknown
): string {
    return JSON.stringify({projectName, projectDescription, profile});
}
